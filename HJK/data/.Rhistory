result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', NMAE(test.label, result), '\n')
}
}
library(e1071)
for(i in 1:2) {
for(j in 1:4) {
model <- svm(rental ~ ., data = train, type = type.name[i], kernel = kernel.name[j])
result <- predict(model, test)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', NMAE(test.label, result), '\n')
}
}
NMAE <- function(actual, predicted) {
return(mean(abs(actual - predicted)/actual))
}
for(i in 1:2) {
for(j in 1:4) {
model <- svm(rental ~ ., data = train, type = type.name[i], kernel = kernel.name[j])
result <- predict(model, test)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', NMAE(test.label, result), '\n')
}
}
train <- df[train_idx, -2]
test <- df[-train_idx, -c(2,13)]
test.label <- df[-train_idx, 13]
for(i in 1:2) {
for(j in 1:4) {
model <- svm(rental ~ ., data = train, type = type.name[i], kernel = kernel.name[j])
result <- predict(model, test)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', NMAE(test.label, result), '\n')
}
}
test <- test.raw
test <- read.csv('test.csv')
summary(test)
test <- read.csv('test_filled.csv')
summary(test)
test <- test[, -2]
summary(test)
test$date <- as.Date(test$date)
summary(test)
model <- svm(rental~., data=train, type='nu-regression', kernel='radial')
pred <- round(predict(model, test))
summary(test)
str(test)
df[,12:17] <- lapply(df[,12:17], as.factor)
str(test)
test[,12:17] <- lapply(test[,12:17], as.factor)
str(test)
model <- svm(rental~., data=train, type='nu-regression', kernel='radial')
pred <- round(predict(model, test))
pred
submit <- pred
str(submit)
summary(submit)
submit -> read.csv("sample_submission.csv")
submit <- read.csv("sample_submission.csv")
submit$rental <- pred
str(submit)
write.csv(submit, 'sample_submission2.csv', row.names=F)
kfold <- function(classifier, ds, cl, fold,mtr,ntr) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
#if (classifier == 'svm') {
#  model <- svm(ds.train, cl.train)
#  pred <- predict(model, ds.test)
#  acc[i] <- mean(pred==cl.test)
#}
if (classifier == 'rf') {
model <- randomForest(ds.train, cl.train, mtry = mtr,ntree = ntr,importance = TRUE)
pred <- round(predict(model, ds.test),0)
acc[i] <- nmae(cl.test,pred)
}
}
return(mean(acc))
}
str(train)
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
#if (classifier == 'svm') {
#  model <- svm(ds.train, cl.train)
#  pred <- predict(model, ds.test)
#  acc[i] <- mean(pred==cl.test)
#}
if (classifier == 'rf') {
model <- randomForest(ds.train, cl.train, mtry = mtr,ntree = ntr,importance = TRUE)
pred <- round(predict(model, ds.test),0)
acc[i] <- nmae(cl.test,pred)
}
}
return(mean(acc))
}
ds <- bike_after[,-12]
ds <- train[,-12]
cl <- train$rental
fold <- cvFolds(nrow(ds), K=5) #fold 생성
set.seed(100)
library(cvTools)
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('rf',ds,cl,fold)
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
#if (classifier == 'svm') {
#  model <- svm(ds.train, cl.train)
#  pred <- predict(model, ds.test)
#  acc[i] <- mean(pred==cl.test)
#}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- nmae(cl.test,pred)
}
}
return(mean(acc))
}
ds <- train[,-12]
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('rf',ds,cl,fold)
ds <- train
result <- kfold('rf',ds,cl,fold)
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
#if (classifier == 'svm') {
#  model <- svm(ds.train, cl.train)
#  pred <- predict(model, ds.test)
#  acc[i] <- mean(pred==cl.test)
#}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(cl.test,pred)
}
}
return(mean(acc))
}
result <- kfold('rf',ds,cl,fold)
result
ds <- train[,-12]
str(ds)
ds <- train[,-12]
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(ds.train, cl.train)
pred <- predict(model, ds.test)
acc[i] <- NMAE(cl.test,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(cl.test,pred)
}
}
return(mean(acc))
}
ds <- train[,-12]
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(ds.train, cl.train,type='eps-regression', kernel='radial')
pred <- predict(model, ds.test)
acc[i] <- NMAE(cl.test,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(cl.test,pred)
}
}
return(mean(acc))
}
ds <- train[,-12]
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
summary(ds)
ds <- lapply(ds[, 12:17], as.numeric)
str(ds)
ds <- train[,-12]
ds[, 12:17] <- lapply(ds[, 12:17], as.numeric)
str(ds)
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(ds.train, cl.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test)
acc[i] <- NMAE(cl.test,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(cl.test,pred)
}
}
return(mean(acc))
}
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
ds <- train[,-12]
str(ds)
summary(ds)
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test)
acc[i] <- NMAE(cl.test,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(cl.test,pred)
}
}
return(mean(acc))
}
ds <- train
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
result
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test)
acc[i] <- NMAE(cl.test,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(ds.test$rental,pred)
}
}
return(mean(acc))
}
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test)
acc[i] <- NMAE(ds.test$rental,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(ds.test$rental,pred)
}
}
return(mean(acc))
}
ds <- train
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
result
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test[, -12])
acc[i] <- NMAE(ds.test$rental,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(ds.test$rental,pred)
}
}
return(mean(acc))
}
ds <- train
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
result
str(ds)
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
ds.train
ds.test
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test[, "rental"])
acc[i] <- NMAE(ds.test$rental,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(ds.test$rental,pred)
}
}
return(mean(acc))
}
ds[, 12:17] <- lapply(ds[, 12:17], as.numeric)
str(ds)
ds <- train
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test["rental"])
acc[i] <- NMAE(ds.test$rental,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(ds.test$rental,pred)
}
}
return(mean(acc))
}
ds[, 12:17] <- lapply(ds[, 12:17], as.numeric)
str(ds)
ds <- train
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
result
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test[, "rental"])
acc[i] <- NMAE(ds.test$rental,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(ds.test$rental,pred)
}
}
return(mean(acc))
}
ds[, 12:17] <- lapply(ds[, 12:17], as.numeric)
str(ds)
ds <- train
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
result
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test[, 12])
acc[i] <- NMAE(ds.test$rental,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(ds.test$rental,pred)
}
}
return(mean(acc))
}
ds[, 12:17] <- lapply(ds[, 12:17], as.numeric)
str(ds)
ds <- train
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
result
kfold <- function(classifier, ds, cl, fold) {
acc <- c() #fold별acc 저장
for (i in 1:5) {
ts.idx<-fold$subset[which(fold$which==i)]
ds.train <- ds[-ts.idx, ]
ds.test <-  ds[ts.idx, ]
cl.train <- cl[-ts.idx]
cl.test <- cl[ts.idx]
if (classifier == 'svm') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- predict(model, ds.test[, -12])
acc[i] <- NMAE(ds.test$rental,pred)
}
if (classifier == 'rf') {
model <- svm(rental~., data=ds.train, type='eps-regression', kernel='radial')
pred <- round(predict(model, ds.test),0)
acc[i] <- NMAE(ds.test$rental,pred)
}
}
return(mean(acc))
}
ds[, 12:17] <- lapply(ds[, 12:17], as.numeric)
str(ds)
ds <- train
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(ds), K=5) #fold 생성
result <- kfold('svm',ds,cl,fold)
result
