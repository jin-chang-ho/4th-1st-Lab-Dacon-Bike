source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("xgboost")
# XgBoost를 사용하기 위한 실험
setwd("C:/Users/HJK/Desktop/lab/Dacon_Seoul_Bike/HJK/data")
source("../functions.R")
df <- load_df()
test <- load_test()
source("../functions.R")
test <- load_test()
View(test)
source("../functions.R")
df <- load_df()
test <- load_test()
str(df)
df$year <- year(df$date)
library(lubridate)
df$year <- year(df$date)
df$month <- month(df$date)
df$wday <- wday(df$date)
str(df)
df[,14:19] <- lapply(df[,14:19], as.numeric)
str(df)
set.seed(100)
train_idx <- sample(1:nrow(df), size=3*round(nrow(df)/4), replace=F)
x_train <- df[train_idx, ] %>%
select(-rental, -date) %>%
as.matrix()
?select()
?select
??select
library(dplyr)
x_train <- df[train_idx, ] %>%
select(-rental, -date) %>%
as.matrix()
x_train
str(x_train)
y_train <- df[train_idx, ] %>%
select(rental)
x_test <- df[-train_idx, ] %>%
select(-rental, -date) %>%
as.matrix()
y_test <- df[-train_idx, ] %>%
select(rental)
library(xgboost)
dtrain <- xgb.DMatrix(x_train, label=y_train)
nrow(x_train)
nrow(y_train)
dtrain <- xgb.DMatrix(x_train, label=y_train)
train_set <- df[train_idx, ]
test_set <- df[-train_idx, ]
y_train <- train_set$rental
x_test <- test_set %>%
select(-rental, -date) %>%
as.matrix()
x_train <- train_set %>%
select(-rental, -date) %>%
as.matrix()
y_test <- test_set$rental
dtrain <- xgb.DMatrix(x_train, label=y_train)
searchGridSubCol <- expand.grid(subsample=c(0.5, 0.6),
colsample_bytree=c(0.5, 0.6),
max_depth=c(7:15),
min_child=seq(1),
eta=c(0.05, 0.1, 0.15)
)
ntrees <- 10
searchGridSubCol
rmseErrorsHyperparameters <- apply(searchGridSubCol, 1, function(parameterList){
#Extract Parameters to test
currentSubsampleRate <- parameterList[["subsample"]]
currentColsampleRate <- parameterList[["colsample_bytree"]]
currentDepth <- parameterList[["max_depth"]]
currentEta <- parameterList[["eta"]]
currentMinChild <- parameterList[["min_child"]]
xgboostModelCV <- xgb.cv(data =  dtrain, nrounds = ntrees, nfold = 5, showsd = TRUE,
metrics = "rmse", verbose = TRUE, "eval_metric" = "rmse",
"objective" = "reg:linear", "max.depth" = currentDepth, "eta" = currentEta,
"subsample" = currentSubsampleRate, "colsample_bytree" = currentColsampleRate
, print_every_n = 10, "min_child_weight" = currentMinChild, booster = "gbtree",
early_stopping_rounds = 10)
xvalidationScores <- as.data.frame(xgboostModelCV$evaluation_log)
rmse <- tail(xvalidationScores$test_rmse_mean, 1)
trmse <- tail(xvalidationScores$train_rmse_mean,1)
output <- return(c(rmse, trmse,currentSubsampleRate, currentColsampleRate, currentDepth, currentEta, currentMinChild))})
output <- as.data.frame(t(rmseErrorsHyperparameters))
varnames <- c("TestRMSE", "TrainRMSE", "SubSampRate", "ColSampRate", "Depth", "eta", "currentMinChild")
names(output) <- varnames
tail(output)
model <- xgb.train(
data=dtrain,
max_depth=10,
nround=150,
eta=0.15,
subsample=0.6,
colsample_bytree=0.6,
min_child_wight=1
)
model <- xgb.train(
data=dtrain,
max_depth=10,
nround=150,
eta=0.15,
subsample=0.6,
colsample_bytree=0.6,
min_child_weight=1
)
xgb.importance(feature_names=colnames(x_train), model) %>%
xgb.plot.importance()
pred <- predict(model, x_test) %>%
expm1()
NMAE(y_test, pred)
pred
pred <- predict(model, x_test)
NMAE(y_test, pred)
pred
NMAE(y_test, pred)
str(test)
test$year <- year(test$date)
test$month <- month(test$date)
test$wday <- wday(test$date)
str(test)
df[,13:18] <- lapply(test[,13:18], as.numeric)
str(df)
summary(df)
test[,13:18] <- lapply(test[,13:18], as.numeric)
str(test)
train_idx <- sample(1:nrow(df), size=3*round(nrow(df)/4), replace=F)
train_set <- df[train_idx, ]
test_set <- df[-train_idx, ]
set.seed(100)
train_idx <- sample(1:nrow(df), size=3*round(nrow(df)/4), replace=F)
train_set <- df[train_idx, ]
test_set <- df[-train_idx, ]
x_train <- train_set %>%
select(-rental, -date, -precipitation) %>%
as.matrix()
y_train <- train_set$rental
x_test <- test_set %>%
select(-rental, -date, -precipitation) %>%
as.matrix()
y_test <- test_set$rental
dtrain <- xgb.DMatrix(x_train, label=y_train)
searchGridSubCol <- expand.grid(subsample=c(0.5, 0.6),
colsample_bytree=c(0.5, 0.6),
max_depth=c(7:15),
min_child=seq(1),
eta=c(0.05, 0.1, 0.15)
)
ntrees <- 10
model <- xgb.train(
data=dtrain,
max_depth=10,
nround=150,
eta=0.15,
subsample=0.6,
colsample_bytree=0.6,
min_child_weight=1
)
xgb.importance(feature_names=colnames(x_train), model) %>%
xgb.plot.importance()
pred <- predict(model, x_test)
NMAE(y_test, pred)
train_set <- df
set.seed(100)
train_set <- df
test_set <- test
x_train <- train_set %>%
select(-rental, -date) %>%
as.matrix()
y_train <- train_set$rental
x_test <- test_set %>%
select(-rental, -date) %>%
as.matrix()
dtrain <- xgb.DMatrix(x_train, label=y_train)
x_test <- test_set %>%
select(-date) %>%
as.matrix()
dtrain <- xgb.DMatrix(x_train, label=y_train)
searchGridSubCol <- expand.grid(subsample=c(0.5, 0.6),
colsample_bytree=c(0.5, 0.6),
max_depth=c(7:15),
min_child=seq(1),
eta=c(0.05, 0.1, 0.15)
)
ntrees <- 10
model <- xgb.train(
data=dtrain,
max_depth=10,
nround=150,
eta=0.15,
subsample=0.6,
colsample_bytree=0.6,
min_child_weight=1
)
xgb.importance(feature_names=colnames(x_train), model) %>%
xgb.plot.importance()
pred <- predict(model, x_test)
predict
pred
pred <- round(pred)
pred
submit <- read.csv('sample_submission.csv')
str(submit)
submit$rental <- pred
write.csv(submit, 'sample_submission.csv', row.names=F)
write.csv(submit, 'sample_submission3.csv', row.names=F)
