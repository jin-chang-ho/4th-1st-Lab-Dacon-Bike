source("../functions.R")
df <- load_df()
test <- load_test()
df$year <- year(df$date)
df$month <- month(df$date)
df$wday <- wday(df$date)
df[,14:19] <- lapply(df[,14:19], as.numeric)
test$year <- year(test$date)
test$month <- month(test$date)
test$wday <- wday(test$date)
test[,13:18] <- lapply(test[,13:18], as.numeric)
str(test)
submit <- read.csv('sample_submission.csv')
str(submit)
submit$rental <- pred
# 8가지 조합 실험
df.raw <- read.csv("train.csv")
df.raw <- df.raw[complete.cases(df.raw$sunshine_sum),]
na.idx <- is.na(df.raw$PM10) | is.na(df.raw$PM2.5)
tmp <- df.raw[!na.idx, ]
df.raw$date <- as.Date(df.raw$date)
tmp$date <- as.Date(tmp$date)
tmp <- tmp[which(tmp$date %in% df$date),]
tmp[which(tmp$date %in% df$date), c("weekday.Weekday","weekday.Holiday","season.Spring","season.Summer","season.Fall","season.Winter")] <- df[which(tmp$date %in% df$date), 14:19]
tmp[which(tmp$date %in% df$date), 2] <- df[which(tmp$date %in% df$date), 2]
tmp[, 14:19] <- lapply(tmp[, 14:19], as.numeric)
tmp[, 14:19] <- tmp[, 14:19] - 1
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
cl1 <- tmp$rental
# dataset 2: 미세먼지는 예측 값 사용, 초미세먼지 열 제거, 강수량 포함해서 예측
tr2 <- df %>%
select(-rental, -date, -PM2.5)
cl2 <- df$rental
# dataset 3: 초미세먼지는 예측 값 사용, 미세먼지 열 제거, 강수량 포함해서 예측
tr3 <- df %>%
select(-rental, -date, -PM10)
cl3 <- df$rental
# dataset 4: 미세먼지와 초미세먼지 모두 예측 값 사용, 강수량 포함 예측
tr4 <- df %>%
select(-rental, -date)
cl4 <- df$rental
# dataset 5: 미세먼지와 초미세먼지 NA 행 제거, 강수량 미포함 예측
tr5 <- tmp %>%
select(-rental, -date, -precipitation)
cl5 <- tmp$rental
# dataset 6: 미세먼지 예측, 초미세먼지 제거, 강수량 미포함
tr6 <- df %>%
select(-rental, -date, -PM2.5, -precipitation)
cl6 <- df$rental
# dataset 7: 초미세먼지 예측, 미세먼지 제거, 강수량 미포함
tr7 <- df %>%
select(-rental, -date, -PM10, -precipitation)
cl7 <- df$rental
# dataset 8: 미세먼지와 초미세먼지 예측, 강수량 미포함
tr8 <- df %>%
select(-rental, -date, -precipitation)
cl8 <- df$rental
# 결과 확인
res <- c()
for (i in 1:8) {
tr <- get(paste0("tr", i))
cl <- get(paste0("cl", i))
set.seed(100)
fold <- cvFolds(nrow(tr), K=5)
res[i] <- kfold('xgb',tr, cl, fold)
}
for(i in 1:8) {
cat("case", i, "\t:\t",res[i],"\n")
}
# 계절 별 예측 시도
ds.spring <- df[which(df$season.Spring == 2),]
ds.summer <- df[which(df$season.Summer == 2),]
ds.fall <- df[which(df$season.Fall == 2), ]
ds.winter <- df[which(df$season.Winter == 2), ]
set.seed(100)
tr.spr <- sample(1:nrow(ds.spring), nrow(ds.spring)*3/4, replace=F)
set.seed(100)
tr.sum <- sample(1:nrow(ds.summer), nrow(ds.summer)*3/4, replace=F)
set.seed(100)
tr.fall <- sample(1:nrow(ds.fall), nrow(ds.fall)*3/4, replace=F)
set.seed(100)
tr.win <- sample(1:nrow(ds.winter), nrow(ds.winter)*3/4, replace=F)
se.tr1 <- ds.spring[tr.spr,] %>%
select(-rental, -date)
se.cl1 <- ds.spring[tr.spr, ]$rental
se.ts1 <- ds.spring[-tr.spr,] %>%
select(-rental, -date)
se.ts.cl1 <- ds.spring[-tr.spr,]$rental
se.tr2 <- ds.summer[tr.sum,] %>%
select(-rental, -date)
se.cl2 <- ds.summer[tr.sum, ]$rental
se.ts2 <- ds.summer[-tr.sum,] %>%
select(-rental, -date)
se.ts.cl2 <- ds.summer[-tr.sum,]$rental
se.tr3 <- ds.fall[tr.fall,] %>%
select(-rental, -date)
se.cl3 <- ds.fall[tr.fall, ]$rental
se.ts3 <- ds.fall[-tr.fall,] %>%
select(-rental, -date)
se.ts.cl3 <- ds.fall[-tr.fall,]$rental
se.tr4 <- ds.winter[tr.win,] %>%
select(-rental, -date)
se.cl4 <- ds.winter[tr.win, ]$rental
se.ts4 <- ds.winter[-tr.win,] %>%
select(-rental, -date)
se.ts.cl4 <- ds.winter[-tr.win,]$rental
result <- c()
result[1] <- XgBoost(se.tr1, se.ts1, se.cl1, se.ts.cl1)
result[2] <- XgBoost(se.tr2, se.ts2, se.cl2, se.ts.cl2)
result[3] <- XgBoost(se.tr3, se.ts3, se.cl3, se.ts.cl3)
result[4] <- XgBoost(se.tr4, se.ts4, se.cl4, se.ts.cl4)
season <- c("Spring","Summer","Fall","Winter")
for(i in 1:4) {
cat(season[i], "\t:\t",result[i],"\n")
}
# 실제 테스트
test.raw <- read.csv('test.csv')
summary(test.raw)
test.raw[is.na(test.raw$sunshine_sum), 9] <- mean(test.raw$sunshine_sum, na.rm=T)
test.raw[,1] <- as.Date(test.raw[,1])
test.raw$weekday <- weekdays(test.raw$date)
test.raw$weekday <- factor(test.raw$weekday %in% c('토요일','일요일'), labels=c('Weekday','Holiday'))
test.raw$season <- month(test.raw$date)
test.raw$season <- ifelse(test.raw$season %in% c(3, 4, 5), "Spring",
ifelse(test.raw$season %in% c(6, 7, 8), "Summer",
ifelse(test.raw$season %in% c(9, 10, 11), "Fall", "Winter")))
test.raw$season <- factor(test.raw$season, levels=c("Spring","Summer","Fall","Winter"))
tmp.date <- test.raw$date
dummy <- dummyVars("~.", data=test.raw)
install.packages("forecast")
install.packages("caret")
library(MASS)
library(e1071)
library(cvTools)
library(forecast)
library(caret)
library(lubridate)
dummy <- dummyVars("~.", data=test.raw)
test.raw <- data.frame(predict(dummy, newdata=test.raw))
test.raw[,13:18] <- lapply(test.raw[,13:18], as.factor)
test.raw$date <- tmp.date
summary(test.raw)
test.raw$date <- as.Date(test.raw$date)
test.raw[,13:18] <- lapply(test.raw[,13:18], as.factor)
summary(test.raw)
# test 데이터 강수량 채우기
### 이 부분부터 시작할 것
df.complete <- new.df
# 데이터 불러오기
setwd("C:/Users/HJK/Desktop/lab/Dacon_Seoul_Bike/HJK/data")
df <- read.csv("new_data.csv")
df.raw <- read.csv("train.csv")
df.complete[,1] <- as.Date(df.complete[,1])
df.complete$weekday <- df[complete.cases(df.raw), 14]
df.complete$season <- df[complete.cases(df.raw), 15]
df.raw[,1] <- as.Date(df.raw[,1])
df.raw$weekday <- df[, 14]
df.raw$season <- df[, 15]
df.raw$weekday <- factor(df.raw[,14], levels=c("Weekday","Holiday"))
df.raw$season <- factor(df.raw[,15], levels=c("Spring","Summer","Fall","Winter"))
df.raw <- df.raw[!is.na(df.raw$sunshine_sum),] # sunshine_sum의 결측치는 5개 그냥 날림
dummy <- dummyVars("~.", data=df.raw)
new.df <- data.frame(predict(dummy, newdata=df.raw))
new.df[,14:19] <- lapply(new.df[,14:19], as.factor)
new.df$date <- df.raw$date
summary(new.df)
# XgBoost를 사용하기 위한 실험
setwd("C:/Users/HJK/Desktop/lab/Dacon_Seoul_Bike/HJK/data")
source("../functions.R")
df <- load_df()
test <- load_test()
df$year <- year(df$date)
df$month <- month(df$date)
df$wday <- wday(df$date)
df[,14:19] <- lapply(df[,14:19], as.numeric)
test$year <- year(test$date)
test$month <- month(test$date)
test$wday <- wday(test$date)
test[,13:18] <- lapply(test[,13:18], as.numeric)
str(test)
submit <- read.csv('sample_submission.csv')
str(submit)
submit$rental <- pred
write.csv(submit, 'sample_submission3.csv', row.names=F)
# 8가지 조합 실험
df.raw <- read.csv("train.csv")
df.raw <- df.raw[complete.cases(df.raw$sunshine_sum),]
na.idx <- is.na(df.raw$PM10) | is.na(df.raw$PM2.5)
tmp <- df.raw[!na.idx, ]
df.raw$date <- as.Date(df.raw$date)
tmp$date <- as.Date(tmp$date)
tmp <- tmp[which(tmp$date %in% df$date),]
tmp[which(tmp$date %in% df$date), c("weekday.Weekday","weekday.Holiday","season.Spring","season.Summer","season.Fall","season.Winter")] <- df[which(tmp$date %in% df$date), 14:19]
tmp[which(tmp$date %in% df$date), 2] <- df[which(tmp$date %in% df$date), 2]
tmp[, 14:19] <- lapply(tmp[, 14:19], as.numeric)
tmp[, 14:19] <- tmp[, 14:19] - 1
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
# XgBoost를 사용하기 위한 실험
setwd("C:/Users/HJK/Desktop/lab/Dacon_Seoul_Bike/HJK/data")
source("../functions.R")
df <- load_df()
test <- load_test()
df$year <- year(df$date)
df$month <- month(df$date)
df$wday <- wday(df$date)
df[,14:19] <- lapply(df[,14:19], as.numeric)
test$year <- year(test$date)
test$month <- month(test$date)
test$wday <- wday(test$date)
test[,13:18] <- lapply(test[,13:18], as.numeric)
str(test)
submit <- read.csv('sample_submission.csv')
str(submit)
# 8가지 조합 실험
df.raw <- read.csv("train.csv")
df.raw <- df.raw[complete.cases(df.raw$sunshine_sum),]
na.idx <- is.na(df.raw$PM10) | is.na(df.raw$PM2.5)
tmp <- df.raw[!na.idx, ]
df.raw$date <- as.Date(df.raw$date)
tmp$date <- as.Date(tmp$date)
tmp <- tmp[which(tmp$date %in% df$date),]
tmp[which(tmp$date %in% df$date), c("weekday.Weekday","weekday.Holiday","season.Spring","season.Summer","season.Fall","season.Winter")] <- df[which(tmp$date %in% df$date), 14:19]
tmp[which(tmp$date %in% df$date), 2] <- df[which(tmp$date %in% df$date), 2]
tmp[, 14:19] <- lapply(tmp[, 14:19], as.numeric)
tmp[, 14:19] <- tmp[, 14:19] - 1
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
cl1 <- tmp$rental
# XgBoost를 사용하기 위한 실험
setwd("C:/Users/HJK/Desktop/lab/Dacon_Seoul_Bike/HJK/data")
source("../functions.R")
df <- load_df()
test <- load_test()
df$year <- year(df$date)
df$month <- month(df$date)
df$wday <- wday(df$date)
df[,14:19] <- lapply(df[,14:19], as.numeric)
test$year <- year(test$date)
test$month <- month(test$date)
test$wday <- wday(test$date)
test[,13:18] <- lapply(test[,13:18], as.numeric)
str(test)
submit <- read.csv('sample_submission.csv')
# 8가지 조합 실험
df.raw <- read.csv("train.csv")
df.raw <- df.raw[complete.cases(df.raw$sunshine_sum),]
na.idx <- is.na(df.raw$PM10) | is.na(df.raw$PM2.5)
tmp <- df.raw[!na.idx, ]
df.raw$date <- as.Date(df.raw$date)
tmp$date <- as.Date(tmp$date)
tmp <- tmp[which(tmp$date %in% df$date),]
tmp[which(tmp$date %in% df$date), c("weekday.Weekday","weekday.Holiday","season.Spring","season.Summer","season.Fall","season.Winter")] <- df[which(tmp$date %in% df$date), 14:19]
tmp[which(tmp$date %in% df$date), 2] <- df[which(tmp$date %in% df$date), 2]
tmp[, 14:19] <- lapply(tmp[, 14:19], as.numeric)
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
str(tmp)
# 8가지 조합 실험
df.raw <- read.csv("train.csv")
df.raw <- df.raw[complete.cases(df.raw$sunshine_sum),]
na.idx <- is.na(df.raw$PM10) | is.na(df.raw$PM2.5)
tmp <- df.raw[!na.idx, ]
df.raw$date <- as.Date(df.raw$date)
tmp$date <- as.Date(tmp$date)
tmp <- tmp[which(tmp$date %in% df$date),]
tmp[which(tmp$date %in% df$date), c("weekday.Weekday","weekday.Holiday","season.Spring","season.Summer","season.Fall","season.Winter")] <- df[which(tmp$date %in% df$date), 14:19]
tmp[which(tmp$date %in% df$date), 2] <- df[which(tmp$date %in% df$date), 2]
tmp[, 14:19] <- lapply(tmp[, 14:19], as.numeric)
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
library(dplyr)
library(lubridate)
library(xgboost)
library(cvTools)
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
# 8가지 조합 실험
df.raw <- read.csv("train.csv")
df.raw <- df.raw[complete.cases(df.raw$sunshine_sum),]
na.idx <- is.na(df.raw$PM10) | is.na(df.raw$PM2.5)
tmp <- df.raw[!na.idx, ]
df.raw$date <- as.Date(df.raw$date)
tmp$date <- as.Date(tmp$date)
tmp <- tmp[which(tmp$date %in% df$date),]
tmp[which(tmp$date %in% df$date), c("weekday.Weekday","weekday.Holiday","season.Spring","season.Summer","season.Fall","season.Winter")] <- df[which(tmp$date %in% df$date), 14:19]
tmp[which(tmp$date %in% df$date), 2] <- df[which(tmp$date %in% df$date), 2]
tmp[, 14:19] <- lapply(tmp[, 14:19], as.numeric)
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
View(tr1)
cl1 <- tmp$rental
# dataset 2: 미세먼지는 예측 값 사용, 초미세먼지 열 제거, 강수량 포함해서 예측
tr2 <- df %>%
select(-rental, -date, -PM2.5)
# 8가지 조합 실험
df.raw <- read.csv("train.csv")
df.raw <- df.raw[complete.cases(df.raw$sunshine_sum),]
na.idx <- is.na(df.raw$PM10) | is.na(df.raw$PM2.5)
tmp <- df.raw[!na.idx, ]
df.raw$date <- as.Date(df.raw$date)
tmp$date <- as.Date(tmp$date)
tmp <- tmp[which(tmp$date %in% df$date),]
tmp[which(tmp$date %in% df$date), c("weekday.Weekday","weekday.Holiday","season.Spring","season.Summer","season.Fall","season.Winter")] <- df[which(tmp$date %in% df$date), 14:19]
tmp[which(tmp$date %in% df$date), 2] <- df[which(tmp$date %in% df$date), 2]
tmp[, 14:19] <- lapply(tmp[, 14:19], as.numeric)
str(tmp)
library(dplyr)
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
install.packages("dplyr")
install.packages(c("mnormt", "nlme"))
install.packages(c("mnormt", "nlme"))
install.packages(c("mnormt", "nlme"))
library(lubridate)
library(dplyr)
library(xgboost)
library(cvTools)
# dataset 1: 미세먼지와 초미세먼지 NA 행 제거, 강수량 포함해서 예측
tr1 <- tmp %>%
select(-rental, -date)
cl1 <- tmp$rental
# dataset 2: 미세먼지는 예측 값 사용, 초미세먼지 열 제거, 강수량 포함해서 예측
tr2 <- df %>%
select(-rental, -date, -PM2.5)
cl2 <- df$rental
# dataset 3: 초미세먼지는 예측 값 사용, 미세먼지 열 제거, 강수량 포함해서 예측
tr3 <- df %>%
select(-rental, -date, -PM10)
cl3 <- df$rental
# dataset 4: 미세먼지와 초미세먼지 모두 예측 값 사용, 강수량 포함 예측
tr4 <- df %>%
select(-rental, -date)
cl4 <- df$rental
# dataset 5: 미세먼지와 초미세먼지 NA 행 제거, 강수량 미포함 예측
tr5 <- tmp %>%
select(-rental, -date, -precipitation)
cl5 <- tmp$rental
# dataset 6: 미세먼지 예측, 초미세먼지 제거, 강수량 미포함
tr6 <- df %>%
select(-rental, -date, -PM2.5, -precipitation)
cl6 <- df$rental
# dataset 7: 초미세먼지 예측, 미세먼지 제거, 강수량 미포함
tr7 <- df %>%
select(-rental, -date, -PM10, -precipitation)
cl7 <- df$rental
# dataset 8: 미세먼지와 초미세먼지 예측, 강수량 미포함
tr8 <- df %>%
select(-rental, -date, -precipitation)
cl8 <- df$rental
# 결과 확인
res <- c()
for (i in 1:8) {
tr <- get(paste0("tr", i))
cl <- get(paste0("cl", i))
set.seed(100)
fold <- cvFolds(nrow(tr), K=5)
res[i] <- kfold('xgb',tr, cl, fold)
}
for(i in 1:8) {
cat("case", i, "\t:\t",res[i],"\n")
}
# 계절 별 예측 시도
ds.spring <- df[which(df$season.Spring == 2),]
ds.summer <- df[which(df$season.Summer == 2),]
ds.fall <- df[which(df$season.Fall == 2), ]
ds.winter <- df[which(df$season.Winter == 2), ]
set.seed(100)
tr.spr <- sample(1:nrow(ds.spring), nrow(ds.spring)*3/4, replace=F)
set.seed(100)
tr.sum <- sample(1:nrow(ds.summer), nrow(ds.summer)*3/4, replace=F)
set.seed(100)
tr.fall <- sample(1:nrow(ds.fall), nrow(ds.fall)*3/4, replace=F)
set.seed(100)
tr.win <- sample(1:nrow(ds.winter), nrow(ds.winter)*3/4, replace=F)
se.tr1 <- ds.spring[tr.spr,] %>%
select(-rental, -date)
se.cl1 <- ds.spring[tr.spr, ]$rental
se.ts1 <- ds.spring[-tr.spr,] %>%
select(-rental, -date)
se.ts.cl1 <- ds.spring[-tr.spr,]$rental
se.tr2 <- ds.summer[tr.sum,] %>%
select(-rental, -date)
se.cl2 <- ds.summer[tr.sum, ]$rental
se.ts2 <- ds.summer[-tr.sum,] %>%
select(-rental, -date)
se.ts.cl2 <- ds.summer[-tr.sum,]$rental
se.tr3 <- ds.fall[tr.fall,] %>%
select(-rental, -date)
se.cl3 <- ds.fall[tr.fall, ]$rental
se.ts3 <- ds.fall[-tr.fall,] %>%
select(-rental, -date)
se.ts.cl3 <- ds.fall[-tr.fall,]$rental
se.tr4 <- ds.winter[tr.win,] %>%
select(-rental, -date)
se.cl4 <- ds.winter[tr.win, ]$rental
se.ts4 <- ds.winter[-tr.win,] %>%
select(-rental, -date)
se.ts.cl4 <- ds.winter[-tr.win,]$rental
result <- c()
result[1] <- XgBoost(se.tr1, se.ts1, se.cl1, se.ts.cl1)
result[2] <- XgBoost(se.tr2, se.ts2, se.cl2, se.ts.cl2)
result[3] <- XgBoost(se.tr3, se.ts3, se.cl3, se.ts.cl3)
result[4] <- XgBoost(se.tr4, se.ts4, se.cl4, se.ts.cl4)
season <- c("Spring","Summer","Fall","Winter")
for(i in 1:4) {
cat(season[i], "\t:\t",result[i],"\n")
}
setwd("C:/Users/HJK/Desktop/lab/Dacon_Seoul_Bike/HJK/data")
test.raw <- read.csv("test.csv")
test <- read.csv("test_filled.csv")
test[!is.na(test.raw), 'precipitation'] <- test.raw[!is.na(test.raw), 'precipitation']
test[!is.na(test.raw), precipitation] <- test.raw[!is.na(test.raw), precipitation]
test[!is.na(test.raw), 2] <- test.raw[!is.na(test.raw), 2]
test.raw <- read.csv("test.csv")
test <- read.csv("test_filled.csv")
str(test)
str(test.raw)
test[!is.na(test.raw$precipitation), 2] <- test.raw[!is.na(test.raw$precipitation), 2]
head(test)
summary(test)
test
write.csv(test, "test_filled.csv", row.names=F)
library('tidyverse')
install.packages("tidyverse")
train.raw <- read.csv("train.csv")
train <- read.csv("real_data.csv")
head(train.raw, 10)
head(train, 10)
df <- train.raw[!is.na(train.raw$precipitation), 1:2]
df
head(df)
for (i in 1:nrow(df)) {
temp <- df[i, 1]
train[which(temp==train$date), 2] <- df[i, 2]
}
head(train.raw)
head(train.raw, 15)
head(train, 15)
head(train.raw, 10)
head(train, 10)
tr <- read.csv("real_data.csv")
source("../functions.R")
tr <- load_df()
str(tr)
tr$year <- year(tr$date)
tr$month <- month(tr$date)
tr$wday <- wday(tr$date)
tr[,14:19] <- lapply(tr[,14:19], as.numeric)
str(tr)
ts <- load_test()
str(ts)
ts$year <- year(ts$date)
ts$month <- month(ts$date)
ts$wday <- wday(ts$date)
ts[,13:18] <- lapply(ts[,13:18], as.numeric)
str(ts)
tr1 <- tr %>%
select(-rental, -date)
cl1 <- tr$rental
ts1 <- ts %>%
select(-date)
pred <- XGB.real_test(tr1, ts1, cl1)
pred
submit <- read.csv("sample_submission.csv")
str(submit)
submit$rental <- pred
write.csv(submit, "sample_submission5.csv", row.names=F)
train
head(train, 10)
write.csv('real_data.csv')
write.csv(train, 'real_data.csv', row.names=F)
train <- read.csv('real_data.csv')
train <- load_df()
str(train)
train <- load_df()
str(train)
source("../functions.R")
train <- load_df()
str(train)
source("../functions.R")
test <- load_test()
str(test)
tr <- train %>%
select(-rental, -date)
cl <- trai$rental
set.seed(100)
cl <- train$rental
set.seed(100)
fold <- cvFolds(nrow(tr), K=5)
res[i] <- kfold('xgb',tr, cl, fold)
res
res <- kfold('xgb',tr, cl, fold)
res
cor(train)
cor(rental~., data=train)
cor(rental~.,)
