source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
apply(iris, 2, max)
source("~/.active-rstudio-document", echo=TRUE)
# 7번
str(iris)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 8번
str(mtcars)
# 8번
apply(mtcars,2,sum)
apply(mtcars,2,max)
apply(mtcars,2,sd)
source("~/.active-rstudio-document", echo=TRUE)
result
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
result <- lgm(10,20)
result
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
boxplot.stats(dist)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("C:/Users/HJK/Desktop/ch4.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
ds <- table(edu)
ds
barplot(ds, main='edu')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
names(max(score))
max(score)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 5번
str(mtcars)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 7번
head(Orange)
cir <- Orange[,c('circumference',-'Tree')]
source("~/.active-rstudio-document", echo=TRUE)
cir
source("~/.active-rstudio-document", echo=TRUE)
boxplot.stats(Orage$age~Orange$Tree)
source("C:/Users/HJK/Desktop/ch5.R", echo=TRUE)
str(Orange)
Orange
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
cor(iris[,1:4])
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
par(mfrow=c(1,1))
source("~/.active-rstudio-document", echo=TRUE)
install.packages("mlbench")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
str(myds)
head(myds)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
drop(myds$grp.1)
myds <- drop(myds[,c(grp.1, grp2)])
drop(myds$grp.2)
myds
myds <- myds[,-c(7,8)]
myds
myds <- myds[,-c(6)]
myds
source("~/.active-rstudio-document", echo=TRUE)
myds
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
boxplot(myds$crim~myds$grp, main="1인당 범죄율")
boxplot(myds$rm~myds$grp,main="방의 개수")
boxplot(myds$dis~myds$grp,main="방의 개수")
boxplot(myds$dis~myds$grp,main="거리리")
boxplot(myds$dis~myds$grp,main="거리")
source("~/.active-rstudio-document", echo=TRUE)
paris(myds[,-6])
pairs(myds[,-6])
source("~/.active-rstudio-document", echo=TRUE)
cor(myds[,-6])
source("~/.active-rstudio-document", echo=TRUE)
# 2번
plot(pressure$temperature,
pressure$pressure,
main="온도와 기압의 산점도",
xlab="temperature",
ylab="pressure")
plot(state.x77[,c("Population","Income","Illiteracy","Area")],
main="Multi Plots")
source("~/.active-rstudio-document", echo=TRUE)
pairs(target,
main="multi")
# 4번
head(iris)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 10번
plot(Girth~Height, data=trees,
main="지름과 높이",
xlab="Girth",
ylab="Height")
source("~/.active-rstudio-document", echo=TRUE)
# 11번
str(trees)
# 11번
cor(trees)
# 11번
str(Orange)
source("~/.active-rstudio-document", echo=TRUE)
# 12번
library(mlbench)
data("Glass")
myds <- Glass
# 12번
#library(mlbench)
#data("Glass")
#myds <- Glass
myds
# 12번
#library(mlbench)
#data("Glass")
#myds <- Glass
target <- myds[,-10]
target
pairs(target,
main="Multi")
cor(target)
str(myds)
source("~/.active-rstudio-document", echo=TRUE)
myds$Type
str(myds)
# 12번
#library(mlbench)
#data("Glass")
myds <- Glass
target <- myds[,-10]
pairs(target,
main="Multi")
cor(target)
point <- as.numeric(myds$Type)
color <- c('red','green','blue','purple','yellow','orange')
pairs(target, pch=point, col=color[point])
# 13번
library(mlbench)
# 13번
#library(mlbench)
data("Ionosphere")
# 13번
#library(mlbench)
#data("Ionosphere")
myds <- Ionosphere[,3:12]
str(myds)
cor(myds)
class(cor(myds))
max(cor(myds))
max(cor(myds))
max(cor(myds)[myds!=1])
max(cor(myds)[cor(myds)!=1])
which(max(cor(myds)[cor(myds)!=1]))
which.max(cor(myds)[cor(myds)!=1])
which(cor(myds)==max(cor(myds)[cor(myds)!=1])
)
max(cor(myds)[cor(myds)!=1]
)
plot(V9~V11, data=myds,
main="Ionosphere",
xlab="V9",
ylab="V11")
cor(myds$V9, myds$V11)
# 14번
years <- 1875:1972
hlevel <- as.vector(LakeHuron)
plot(years,
hlevel,
main="LakeHuron",
xlab="Year",
ylab="수위위",
type="l",
lty=1,
col="blue",)
plot(years,
hlevel,
main="LakeHuron",
xlab="Year",
ylab="수위",
type="l",
lty=1,
col="blue",)
plot(years,
hlevel,
main="LakeHuron",
xlab="Year",
ylab="수위",
type="l",
lty=1,
col="blue")
# 15번
str(AirPassengers)
# 15번
class(AirPassengers)
# 15번
AirPassengers
year1949 <- AirPassengers['1949']
year1949
year1949 <- c(112,118,132,129,121,135,148,148,136,119,104,118)
year1955 <- c(242,233,267,269,270,315,364,347,312,274,237,278)
year1960 <- c(417,391,419,461,472,535,622,606,508,461,390,432)
month <- c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
source("~/.active-rstudio-document", echo=TRUE)
month <- 1:12
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 15번
year1949 <- c(112,118,132,129,121,135,148,148,136,119,104,118)
year1955 <- c(242,233,267,269,270,315,364,347,312,274,237,278)
year1960 <- c(417,391,419,461,472,535,622,606,508,461,390,432)
month <- 1:12
plot(month,
year1949,
main="월별 항공승객수",
xlab="month",
ylab="승객수",
type="b",
lty=1,
col="red")
lines(month,
year1955,
type="b",
col="green")
lines(month,
year1960,
type="b",
col="blue")
source("~/.active-rstudio-document", echo=TRUE)
lines(month, year1955, col="green")
year1949 <- c(112,118,132,129,121,135,148,148,136,119,104,118)
year1955 <- c(242,233,267,269,270,315,364,347,312,274,237,278)
year1960 <- c(417,391,419,461,472,535,622,606,508,461,390,432)
month <- 1:12
plot(month,
year1949,
main="월별 항공승객수",
xlab="month",
ylab="승객수",
type="l",
lty=1,
col="red")
lines(month, year1955, col="green")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 16번
str(USAccDeaths)
head(USAccDeaths)
USAccDeaths
year1 <- c(9007,8106,8928,9137,10017,10826,11317,10744,9713,9938,9161,8927)
year2 <- c(8162,7306,8124,7870,9387,9556,10093,9620,8285,8466,8160,8034)
year3 <- c(7792,6957,7726,8106,8890,9299,10625,9302,8314,8850,8265,8796)
plot(month,
year1,
main="월별 사망자수",
xlab="month",
ylab="사망자수",
type="l",
lty=1,
col="red",
ylim=c(7000,12000))
lines(month, year2, col="green")
lines(month, year3, col="blue")
summary(new.df)
View(myds)
# 데이터 불러오기
setwd("C:/Users/HJK/Desktop/lab/Dacon_Seoul_Bike/HJK/data")
new.df <- read.csv('readl_data.csv')
new.df <- read.csv('real_data.csv')
str(new.df)
new.df$date <- as.Date(new.df$date)
new.df[, 14:19] <- lapply(new.df[, 14:19], as.factor)
str(new.df)
# 실제 테스트
test.raw <- read.csv('test.csv')
summary(test.raw)
test.raw <- read.csv('test_filled.csv')
str(test.raw)
test.raw[,13:18] <- lapply(test.raw[,13:18], as.factor)
test.raw$date <- as.Date(test.raw$date)
str(test.raw)
prec.tr <- new.df[, -13]
# test 데이터 강수량 채우기
### 이 부분부터 시작할 것
df.complete <- new.df
ts.idx <- sample(1:nrow(df.complete), size=round(nrow(df.complete)/4), replace=F)
prec.tr <- df.complete[-ts.idx, -13]
prec.ts <- df.complete[ts.idx, -c(2, 13)]
prec.ts.lb <- df.complete[ts.idx, 2]
for(i in 1:2) {
for(j in 1:4) {
model <- svm(precipitation ~ ., data = prec.tr, type = type.name[i], kernel = kernel.name[j])
result <- predict(model, prec.ts)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', MAE(prec.ts.lb, result), '\n')
}
}
library(e1071)
library(MASS)
library(cvTools)
library(lubridate)
for(i in 1:2) {
for(j in 1:4) {
model <- svm(precipitation ~ ., data = prec.tr, type = type.name[i], kernel = kernel.name[j])
result <- predict(model, prec.ts)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', MAE(prec.ts.lb, result), '\n')
}
}
type.name = c('eps-regression', 'nu-regression')
kernel.name = c('linear', 'polynomial','radial','sigmoid')
for(i in 1:2) {
for(j in 1:4) {
model <- svm(precipitation ~ ., data = prec.tr, type = type.name[i], kernel = kernel.name[j])
result <- predict(model, prec.ts)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', MAE(prec.ts.lb, result), '\n')
}
}
MAE_FUN <- function(actual, predicted) {
return(mean(abs(actual - predicted)))
}
for(i in 1:2) {
for(j in 1:4) {
model <- svm(precipitation ~ ., data = prec.tr, type = type.name[i], kernel = kernel.name[j])
result <- predict(model, prec.ts)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', MAE(prec.ts.lb, result), '\n')
}
}
for(i in 1:2) {
for(j in 1:4) {
model <- svm(precipitation ~ ., data = prec.tr, type = type.name[i], kernel = kernel.name[j])
result <- predict(model, prec.ts)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', MAE_FUN(prec.ts.lb, result), '\n')
}
}
prec.tr <- new.df[, -13]
prec.model <- svm(precipitation~., data=prec.tr, type='eps-regression', kernel='polynomial')
prec.model <- svm(precipitation~., data=prec.tr, type='eps-regression', kernel='polynomial')
test.raw.na <- test.raw.na[is.na(test.raw.na$precipitation), -2]
test.raw.na <- test.raw[is.na(test.raw$precipitation), -2]
test.raw.na[is.na(test.raw.na$precipitation), 2] <- round(predict(prec.model, test.raw.na), 1)
summary(new.df)
summary(test.raw.na)
str(test.raw.na)
test.raw <- read.csv('test_filled.csv')
test.raw$date <- as.Date(test.raw$date)
test.raw[,13:18] <- lapply(test.raw[,13:18], as.factor)
str(test.raw)
prec.tr <- new.df[, -13]
prec.model <- svm(precipitation~., data=prec.tr, type='eps-regression', kernel='polynomial')
test.raw.na <- test.raw[is.na(test.raw$precipitation), -2]
test.raw[is.na(test.raw.na$precipitation), 2] <- round(predict(prec.model, test.raw.na), 1)
summary(test.raw.na)
summary(test.raw)
str(test.raw.na)
summary(test.raw)
test.raw[is.na(test.raw.na$precipitation), 2] <- round(predict(prec.model, test.raw.na), 1)
summary(test.raw)
test.raw.na <- test.raw[is.na(test.raw$precipitation), -2]
test.raw[is.na(test.raw$precipitation), 2] <- round(predict(prec.model, test.raw.na), 1)
summary(test.raw)
test.raw.na[test.raw.na$precipitation < 1,2] <- 0
summary(test.raw)
test.raw[test.raw$precipitation < 1,2] <- 0
summary(test.raw)
str(test.raw.na)
# 마지막 결정
# 모델 생성
train <- new.df[, -13]
test <- test.raw
train_idx <- sample(1:nrow(new.df), size=3*round(nrow(new.df)/4), replace=F)
train <- new.df[train_idx,]
test <- new.df[-train_idx, -13]
test.label <- new.df[-train_idx, 13]
# 내 데이터셋으로 svm 실험
type.name = c('eps-regression', 'nu-regression')
kernel.name = c('linear', 'polynomial','radial','sigmoid')
for(i in 1:2) {
for(j in 1:4) {
model <- svm(rental ~ ., data=train, type=type.name[i], kernel=kernel.name[j])
result <- predict(model, test)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', NMAE(test.label, result), '\n')
}
}
NMAE <- function(actual, predicted) {
return(mean(abs(actual - predicted)/actual))
}
# 모델 생성
train_idx <- sample(1:nrow(new.df), size=3*round(nrow(new.df)/4), replace=F)
train <- new.df[train_idx,]
test <- new.df[-train_idx, -13]
test.label <- new.df[-train_idx, 13]
# 내 데이터셋으로 svm 실험
type.name = c('eps-regression', 'nu-regression')
kernel.name = c('linear', 'polynomial','radial','sigmoid')
for(i in 1:2) {
for(j in 1:4) {
model <- svm(rental ~ ., data=train, type=type.name[i], kernel=kernel.name[j])
result <- predict(model, test)
result <- round(result)
cat(type.name[i], '\t-\t', kernel.name[j], '\t:\t', NMAE(test.label, result), '\n')
}
}
model <- svm(rental~., data=train, type='nu-regression', kernel='radial')
pred <- round(predict(model, test))
pred
str(test)
# 제출용 파일
submit <- read.csv('sample_submission.csv')
str(submit)
tmp <- read.csv('test.csv')
str(tmp)
prec.tr <- new.df[, -13]
prec.model <- svm(precipitation~., data=prec.tr, type='eps-regression', kernel='polynomial')
test.raw.na <- test.raw[is.na(test.raw$precipitation), -2]
test.raw[is.na(test.raw$precipitation), 2] <- round(predict(prec.model, test.raw.na), 1)
summary(test.raw)
str(test.raw.na)
str(test.raw)
summary(test.raw)
str(test.raw)
# 마지막 결정
# 모델 생성
train <- new.df[, -13]
test <- test.raw
model <- svm(rental~., data=train, type='nu-regression', kernel='radial')
# 마지막 결정
# 모델 생성
train <- new.df[,]
test <- test.raw
model <- svm(rental~., data=train, type='nu-regression', kernel='radial')
pred <- round(predict(model, test))
pred
pred<0
sum(pred<0)
write.csv(test.raw, 'test_filled.csv', row.name=F)
write.csv(test.raw, 'test_filled.csv', row.names=F)
submit$rental <- pred
write.csv(submit, 'submit.csv', row.names=F)
write.csv(submit, 'sample_submission.csv', row.names=F)
